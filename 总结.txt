1. 序列化器可以传递额外的参数 context  ,这个参数后面应该是视图中进行使用.
2. 序列化和反序列化的过程,并无明显的过程. 而是在 调用其 data 属性的时已经是序列化之后的.  
- 要注意的是: 序列化返回的只是 字典类型的数据

3. 序列化的过程中涉及到 外键关联字段. 处理方式有5种:
- 3.1. PrimaryKeyRelation     qs=BookInfo.objects.all()    一方  的主键(一般是ID)来作为 限制 , 并在序列化时输出
- 3.2. 指明某个字段作为序列化的返回值.
- 3.3 指明 __str__(self) 方法的返回值 作为序列化的返回值
- 3.4 嵌套, 将整个关联的 一方 的所有字段作为 序列化放回的值
- 3.5 重写 to_response 方法. 因为在 django 中, models中每个字段也是一个类, 而且 外键关联 字段的类是有一个基类的. 需要继承这个基类, 然后进行 to_response 方法的重写即可实现我们需要的个性化内容.

heroinfo_set   =    模型类小写__set  可以取到外键关联, 从一到多.    设置  read_only = True ;   many=True.  关于many 我在想如果是单个呢? 一对一 需不需要写?


关于反序列化的验证, html中写的有些迷惑. validate_data 和 data 的区别在于一个是保存到数据库之前和之后.

前端json -> 未经验证之前, 由视图函数中的另外一个parse类来 将 前端传递的json或html 转换成 python中的字典;

serializer.is_valid()   是调用序列化器进行校验;   返回值是 True 和 False . 然后我们可以通过 serializer.error  来获取错误信息. 但是实际中一般 采取  抛出异常的方式(raise_exception=True) 来 直接向  前端返回 400 的错误信息.    

serializer 的验证还可以有组合来满足个性化的验证需求:
- 1.通过定义serializer.字段 选项 来进行初步验证.
- 2.上述验证结束之后, 还可以补充单个字段的验证,  validate_title(self, value):
- 3.经过上述两步验证之后, 还可以继续进行联合验证, 看最终是否满足要求
- 4. 或者定义 自己的验证方法,放在 类的外部,  然后通过  选项指明 验证器validators=验证方法. 验证方法可以写成通用的.   
     类比    validate_字段 ;  同时, 验证器可以是传 列表
if 验证不通过:
    serializer.ValidationError("错误提示信息")    
elif 验证通过:
    return value 或者 return attrs

如果联合验证未通过, serializer.error 提示的是  non_field_errors


create(self, validated_data)   看看传入的两个值   和之前的   validate_data 区别????

update()  注意 一般习惯上 是作为全字段的校验. 所以, 模型类的中每一个字段都要写

*** 注意没有进行 数据库的操作.  
- 在序列化 调用save 方法 , 仅仅是返回了 实例(模型类实例化对象)


可能数据库和序列化器的要求不一致,  容易报数据库的错误, 如果分开管理的话.


可以自己通过 shell 来查看 模型类序列化器创建的情况, 这个可以大大提高开发:
s = XXXSerializer(不用传递任何东西)
s
终端即可显示'

字段 = 可以进行自己的个性化 设置; 那么在 fields 字段中 , 个性化设置的会覆盖Django默认生成的.


还可以通过额外的参数设置 来覆盖模型类中 默认生成的 选项声明


max 和 min 有一个小错误, 需要修正




---

持久化, 或者定时任务交给 启超 去做;
celery 考虑 使用 redis 去做. 过期时间.

删除 过去的照片.

定时任务全部使用 redis 去做.

需要明确 航线的名称,编号.  这些分别是啥?共有多少个编号.